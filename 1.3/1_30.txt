#lang sicp

(define (cube x) (* x x x))

(define (sum-recur term a next b)
  (if (> a b)
      0
      (+ (term a)
         (sum-recur term (next a) next b))))

(define (sum-iter term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a) (+ (term a) result))))
  (iter a 0))


(define (integral f a b n sum-f)
  (define h (/ (- b a) n))
  (define (kth-y k)
    (*
     (f (+ a (* k h)))
     (cond ((or (= k 0) (= k n)) 1)
           ((even? k) 4)
           (else 2))))
  (* (/ h 3) (sum-f kth-y 0 inc n)))


(integral cube 0 1 1000 sum-recur) ;; 1498003/6000000
(integral cube 0 1 1000 sum-iter) ;; 1498003/6000000
(integral cube 0 1 100000 sum-recur) ;; 14999800003/60000000000
(integral cube 0 1 100000 sum-iter) ;; 14999800003/60000000000
