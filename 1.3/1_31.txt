#lang sicp


(define (product-iter term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a) (* (term a) result))))
  (iter a 1))

(define (product-recur term a next b)
  (if (> a b)
      1
      (* (term a) (product-recur term (next a) next b))))


(define (identity x) x)

(define (factorial n product-f)
  (product-f identity 1 inc n))

(factorial 3 product-recur)
(factorial 3 product-iter)
(factorial 6 product-recur)
(factorial 6 product-iter)
(factorial 15 product-recur)
(factorial 15 product-iter)
(factorial 30 product-recur)
(factorial 30 product-iter)
