#lang sicp

(define (identity x) x)

(define (filtered-accumulate combiner null-value term a next b filter)
  (define (iter a result)
    (if (>= a b)
        result
        (iter (next a)
              (if (filter a)
                  (combiner (term a) result)
                  result))))
  (iter a null-value))


(define (prime? n)
  (= n (smallest-divisor n)))

(define (smallest-divisor n)
  (find-divisor n 2))

(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) 
         n)
        ((divides? test-divisor n) 
         test-divisor)
        (else (find-divisor 
               n 
               (+ test-divisor 1)))))

(define (divides? a b)
  (= (remainder b a) 0))

(define (square x) (* x x))

(define (sum-squares a b)
  (filtered-accumulate + 0 square a inc b prime?))

(define (gcd a b)
  (if (= b 0)
      a
      (gcd b (remainder a b))))

(define (product-relative-primes n)
  (define (relatively-prime i)
    (= (gcd i n) 1))
  (filtered-accumulate * 1 identity 1 inc n relatively-prime))

(sum-squares 4 6)
(product-relative-primes 10)
