#lang sicp

(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (runtime)))

(define (start-prime-test n start-time)
  (if (prime? n)
      (report-prime (- (runtime) 
                       start-time))))

(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time))

(define (prime? n)
  (= n (smallest-divisor n)))

(define (smallest-divisor n)
  (find-divisor n 2))

(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) 
         n)
        ((divides? test-divisor n) 
         test-divisor)
        (else (find-divisor 
               n 
               (next test-divisor)))))

(define (divides? a b)
  (= (remainder b a) 0))

(define (square x) (* x x))


(define (search-for-primes to start)
  (search-for-primes-iter start to))

(define (search-for-primes-iter counter to)
  (timed-prime-test counter)
  (if (> (dec to) counter)
    (search-for-primes-iter (+ counter 2) to)))

(define (next x)
  (cond ((= 2 x) 3)
        (else (+ x 2))))


(search-for-primes 1000000000 1000000021)
(search-for-primes 10000000000 10000000061)
(search-for-primes 100000000000 100000000057)
(search-for-primes 1000000000000 1000000000063)


;; With next
;; 1000000021 *** 1989
;; 10000000061 *** 5371
;; 100000000057 *** 16951
;; 1000000000063 *** 56089

;; Without
;; 1000000021 *** 3186
;; 10000000061 *** 8736
;; 100000000057 *** 30386
;; 1000000000063 *** 89143

;; Looks right to me
